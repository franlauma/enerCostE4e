rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their own profile with ID 'user_abc'.
     * @allow (get, update, delete) - Authenticated user 'user_abc' can read, update, or delete their own profile.
     * @deny (create, get, update, delete) - Authenticated user 'user_xyz' cannot access user profile 'user_abc'.
     * @deny (list) - Any user cannot list all user profiles.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //function isExistingOwner(userId) {
      //  return isOwner(userId) && resource != null;
      //}

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for simulations. Only the owning user can manage their simulations.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create) - Authenticated user 'user_abc' can create a simulation under their profile.
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete simulations under their profile.
     * @deny (create, get, list, update, delete) - Authenticated user 'user_xyz' cannot access simulations under user 'user_abc'.
     * @principle Enforces document ownership for all operations on simulations.
     */
    match /users/{userId}/simulations/{simulationId} {
      // Reuse the isSignedIn() and isOwner() functions defined above.
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}