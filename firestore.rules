/**
 * @fileoverview Firestore Security Rules for EnerCost Analyzer.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and simulation data.
 * All write operations are restricted to authenticated users, and data access is limited to the
 * owning user. Public read access is enabled for the `tariffs` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the user's UID.
 * - /users/{userId}/simulations/{simulationId}: Stores simulation data, nested under the user's profile.
 * - /tariffs/{tariffId}: Stores public tariff information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles and simulation data.
 * - Listing of user documents is disallowed.
 * - Public read access is granted for the `tariffs` collection.
 * - No data shape validation is performed in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile document if userId == user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for userId == user_abc.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their profile document if userId == user_abc.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile document for userId == user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only signed-in users can interact with user documents
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disable listing of user documents for privacy.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to simulation documents nested under a user profile.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create) - User with UID 'user_abc' can create a simulation document under their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a simulation document under user 'user_abc''s profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete simulation documents under their profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete simulation documents under user 'user_abc''s profile.
     * @principle Enforces document ownership and prevents unauthorized access to simulation data.
     */
    match /users/{userId}/simulations/{simulationId} {
      // Only the owner user can interact with their simulation documents
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tariff documents. Tariffs are publicly readable.
     * @path /tariffs/{tariffId}
     * @allow (get, list) - Any signed-in user can read tariff documents.
     * @deny (create, update, delete) - No user can create, update, or delete tariff documents (admin-only in future).
     * @principle Allows public read access while restricting write access.
     */
    match /tariffs/{tariffId} {
      // Tariffs are publicly readable, but only admins can modify them
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add admin role check here.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}