/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles and simulations,
 * with public read access for tariffs.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /users/{userId}/simulations/{simulationId}: Stores simulation data, accessible only to the owning user.
 * - /tariffs/{tariffId}: Stores public tariff information, readable by all authenticated users.  Write access is not currently secured.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Tariffs are publicly readable but require write protection.  Write access is currently open and must be secured.
 *
 * Denormalization for Authorization:
 * - The data structure inherently denormalizes the user-simulation relationship by nesting simulations under the user's document. This allows direct enforcement of ownership without needing `get()` calls.
 *
 * Structural Segregation:
 * - Public tariff data is stored in a separate root-level collection (`/tariffs`) to allow for public read access without compromising user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owning user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their profile if request.auth.uid == userId.
     * @allow (get, update, delete) - Authenticated user 'user_abc' can read, update, or delete their profile (if it exists).
     * @deny (create) - Authenticated user 'user_xyz' cannot create a profile for user 'user_abc'.
     * @deny (get, update, delete) - Authenticated user 'user_xyz' cannot read, update, or delete the profile of user 'user_abc'.
     * @deny (list) - Listing all users is disallowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      // Disallow listing all users
      allow list: if false;

      // Only allow creating a user document if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId);

      // Only allow getting a user document if the user is signed in and the userId matches the authenticated user's ID.
      allow get: if isSignedIn() && isOwner(userId);

      // Only allow updating a user document if the user is signed in, the userId matches the authenticated user's ID, and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Only allow deleting a user document if the user is signed in and the userId matches the authenticated user's ID and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects simulation data, ensuring only the owning user can access their own simulations.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create) - Authenticated user 'user_abc' can create a simulation under their profile.
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete their own simulations.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a simulation under user 'user_abc''s profile.
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, list, update, or delete simulations under user 'user_abc''s profile.
     * @principle Enforces document ownership for writes and reads within a user-specific subcollection.
     */
    match /users/{userId}/simulations/{simulationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      // Allow listing simulations if the user is the owner.
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creating a simulation if the user is the owner.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow getting a simulation if the user is the owner.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow updating a simulation if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Allow deleting a simulation if the user is the owner and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to tariff data, but currently does not secure write access.
     * @path /tariffs/{tariffId}
     * @allow (get, list) - Any authenticated user can read tariff data.
     * @allow (create, update, delete) - ANY user can create, update or delete a tariff. This is insecure and MUST be addressed.
     * @principle Provides public read access for tariff information.
     */
    match /tariffs/{tariffId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow anyone to read tariff data.
      allow get, list: if isSignedIn();

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}