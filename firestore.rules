/**
 * @fileoverview Firestore Security Rules for EnerCost Analyzer.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and simulations,
 * while providing public read access to tariff information.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the authenticated user can access their own profile.
 * - /users/{userId}/simulations/{simulationId}: Stores simulation data for each user. Only the authenticated user can access their own simulations.
 * - /tariffs/{tariffId}: Stores electricity tariff information. This data is publicly readable by any authenticated user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only read and write their own simulation data.
 * - All authenticated users can read tariff data.
 * - Only authorized roles (currently none configured) can create, update, or delete tariffs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the user's ID matches the requested user ID.
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user's ID does not match the requested user ID.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allow the user to create their own profile if the userId matches.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allow the user to get, update, and delete their own profile.
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // No listing of users.
      allow list: if false;
    }

    /**
     * @description Controls access to simulation documents within a user's profile.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create, get, list, update, delete) - If the user is the owner of the simulation.
     * @deny (create, get, list, update, delete) - If the user is not the owner of the simulation.
     * @principle Restricts access to a user's own simulation data.
     */
    match /users/{userId}/simulations/{simulationId} {
      // Allow the user to create, get, list, update, and delete their own simulations.
      allow create, get, list, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to tariff documents.
     * @path /tariffs/{tariffId}
     * @allow (get, list) - To all authenticated users.
     * @deny (create, update, delete) - To all users.
     * @principle Permits public read access to tariff data, but restricts writes.
     */
    match /tariffs/{tariffId} {
      // Allow all authenticated users to read tariff information.
      allow get, list: if isSignedIn();
      // Only authorized roles can create, update, or delete tariffs.
      allow create, update, delete: if false;
    }

    // Helper functions

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the existing resource.
      * @param {string} userId The user ID to check against.
      * @return {bool} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}