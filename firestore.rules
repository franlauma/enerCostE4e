/**
 * @fileoverview Firestore Security Rules for EnerCost Analyzer.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated simulations.
 * Only authenticated users can access their own data. Public read access is granted to tariff data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /users/{userId}/simulations/{simulationId}: Stores simulation data specific to each user.
 * - /tariffs/{tariffId}: Stores public tariff information.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profiles.
 * - Users can only create, read, update, and delete their own simulations.
 * - Listing simulations is restricted to the owning user.
 * - Tariff data is publicly readable but currently not writable (admin-only writes are a future consideration).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their own profile at /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for simulations.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create) - User with UID 'user_abc' can create a simulation under their profile at /users/user_abc/simulations/sim_123.
     * @deny (create) - User with UID 'user_xyz' cannot create a simulation under /users/user_abc/simulations/sim_123.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their own simulation at /users/user_abc/simulations/sim_123.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the simulation at /users/user_abc/simulations/sim_123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/simulations/{simulationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the tariffs collection, allowing public read access.
     * @path /tariffs/{tariffId}
     * @allow (get, list) - Any authenticated user can read tariff data.
     * @deny (create, update, delete) - No user can create, update, or delete tariff data (admin-only in the future).
     * @principle Provides public read access to tariff data while restricting write access.
     */
    match /tariffs/{tariffId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}