/**
 * @fileoverview Firestore Security Rules for EnerCost Analyzer.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile and simulations.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles.
 * - `/users/{userId}/simulations/{simulationId}`: Stores simulation data specific to each user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents and simulations.
 * - Listing simulations is restricted to the owning user.
 * - Data validation is relaxed to allow for rapid prototyping and iteration, with focus on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own profile if the userId matches their auth.uid.
     * @deny (create) - User attempts to create a profile with a userId that does not match their auth.uid.
     * @deny (get, update, delete) - User attempts to get, update, or delete a profile with a userId that does not match their auth.uid.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isOwner enforces that userId == request.auth.uid
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to simulation documents within a user's profile.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create) - Authenticated user can create a simulation under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, or delete their own simulations.
     * @deny (create) - User attempts to create a simulation under a different user ID.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete a simulation under a different user ID.
     * @principle Enforces user-specific data isolation by requiring the correct user ID.
     */
    match /users/{userId}/simulations/{simulationId} {
      // isOwner enforces that userId == request.auth.uid
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions

    // isSignedIn() returns true if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // isOwner(userId) returns true if the userId matches the authenticated user's ID.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // isExistingOwner(userId) returns true if the userId matches the authenticated user's ID and resource exists
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}