/**
 * @file Firestore Security Rules for EnerCost Analyzer
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile and simulations.
 *
 * @data-structure
 * - /users/{userId}: Stores user profiles, with the document ID matching the user's UID.
 * - /users/{userId}/simulations/{simulationId}: Stores simulation data, nested under the user's profile.
 *
 * @key-security-decisions
 * - Listing all users is disallowed to protect user privacy.
 * - Data validation is relaxed to allow for rapid prototyping but enforces critical path and relationship consistency.
 *
 * @denormalization-strategy
 * No denormalization is needed as all data is private to the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow (get) - N/A
     * @deny (list) - Any authenticated user.
     * @principle Prevents unauthorized listing of user profiles.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to individual user profiles.
     * @path /users/{userId}
     * @allow (create) An authenticated user whose UID matches the `userId` parameter.
     * @allow (get) An authenticated user whose UID matches the `userId` parameter.
     * @allow (update) An authenticated user whose UID matches the `userId` parameter, only if the id remains the same.
     * @allow (delete) An authenticated user whose UID matches the `userId` parameter and the document exists.
     * @deny (create) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (get) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (update) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (delete) If the authenticated user's UID does not match the `userId` parameter.
     * @principle Enforces document ownership and validates relational integrity (userId in path == userId in doc).
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to simulation data for each user.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create) An authenticated user whose UID matches the `userId` parameter.
     * @allow (get) An authenticated user whose UID matches the `userId` parameter.
     * @allow (list) An authenticated user whose UID matches the `userId` parameter.
     * @allow (update) An authenticated user whose UID matches the `userId` parameter.
     * @allow (delete) An authenticated user whose UID matches the `userId` parameter.
     * @deny (create) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (get) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (list) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (update) If the authenticated user's UID does not match the `userId` parameter.
     * @deny (delete) If the authenticated user's UID does not match the `userId` parameter.
     * @principle Enforces document ownership and validates relational integrity (userId in path == userId in doc).
     */
    match /users/{userId}/simulations/{simulationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the current user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the userId.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is authenticated and their UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is authenticated, their UID matches the provided userId, and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}