/**
 * @fileoverview Firestore Security Rules for EnerCost Analyzer.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model. User-specific data (profiles and simulations) is strictly controlled
 * using an ownership model, while tariff data is publicly readable. All write operations require authentication.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/simulations/{simulationId}: Stores simulation data for each user.
 * - /tariffs/{tariffId}: Stores publicly readable tariff data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and simulations.
 * - Tariff data is publicly readable but not writable in the current prototype.
 * - Listing operations on user-scoped subcollections are allowed only for the owner.
 * - Data validation is limited to ownership checks and relationship enforcement.
 *
 * Denormalization for Authorization:
 * Not used in this version. The path-based structure provides sufficient authorization context.
 *
 * Structural Segregation:
 * The separation of user simulations into a user-owned subcollection and tariffs into a public top-level collection
 * ensures secure and efficient list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile if the userId matches their auth UID.
     * @deny (create, get, update, delete) - Any operation if the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-level access control for simulations within a user's profile.
     * @path /users/{userId}/simulations/{simulationId}
     * @allow (create, get, update, delete) - Authenticated user can create, get, update, and delete their own simulations if the userId matches their auth UID.
     * @deny (create, get, update, delete) - Any operation if the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/simulations/{simulationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to tariff data.  Write access is denied in this prototype.
     * @path /tariffs/{tariffId}
     * @allow (get, list) - Any user can read tariff data.
     * @deny (create, update, delete) - No user can create, update, or delete tariff data in this prototype.
     * @principle Public read with restricted writes.
     */
    match /tariffs/{tariffId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}